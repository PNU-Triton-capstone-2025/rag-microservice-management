apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
  namespace: ${NAMESPACE}
data:
  logstash.conf: |
    input {
      beats {
        port => ${LOGSTASH_PORT}
      }
    }
    filter {
      # 1단계: 가장 먼저 JSON 형식으로 파싱을 시도합니다.
      # 많은 최신 애플리케이션이 JSON 형식으로 로그를 남깁니다.
      json {
        source => "message"
        # 성공하면 자동으로 필드가 분리되고, 실패하면 _jsonparsefailure 태그가 붙습니다.
      }

      # 2단계: JSON 파싱에 실패했다면, Spring Boot 형식인지 확인합니다.
      if "_jsonparsefailure" in [tags] {
        # 실패 태그는 더 이상 필요 없으므로 제거합니다.
        mutate {
          remove_tag => ["_jsonparsefailure"]
        }

        grok {
          # 이전에 사용했던 표준 Spring Boot Grok 패턴
          match => { "message" => "%{TIMESTAMP_ISO8601:log_timestamp}\s+%{LOGLEVEL:log_level}\s+%{NUMBER:pid:int}\s+---\s+\[%{DATA:thread_name}\]\s+%{JAVACLASS:class_name}\s*:\s+%{GREEDYDATA:log_message}" }
          add_tag => [ "grok_parsed_spring" ]
        }
      }

      # 3단계: 위 두 가지 파싱이 모두 실패했다면, Nginx access log 형식인지 확인합니다.
      if !("json" in [tags]) and !("grok_parsed_spring" in [tags]) {
        grok {
          # 일반적인 Nginx access log Grok 패턴
          match => { "message" => '%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:timestamp}\] "%{WORD:verb} %{DATA:request} HTTP/%{NUMBER:httpversion}" %{NUMBER:response:int} %{NUMBER:bytes:int} "%{DATA:referrer}" "%{DATA:agent}"' }
          add_tag => [ "grok_parsed_nginx" ]
        }
      }

      # --- 파싱된 로그 후처리 ---

      # Grok으로 파싱된 로그들의 타임스탬프를 Logstash의 기본 타임스탬프로 설정합니다.
      if "grok_parsed_spring" in [tags] {
        date {
          match => [ "log_timestamp", "ISO8601" ]
          target => "@timestamp"
        }
      } else if "grok_parsed_nginx" in [tags] {
        date {
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
          target => "@timestamp"
        }
      }

      # 만약 위 3가지 중 어떤 형식으로든 파싱에 성공했다면, 원본 message 필드를 삭제하여 데이터를 깔끔하게 만듭니다.
      if ("json" in [tags]) or ("grok_parsed_spring" in [tags]) or ("grok_parsed_nginx" in [tags]) {
        mutate {
          remove_field => ["message", "log_timestamp", "timestamp"]
        }
      } else {
        # 모든 파싱에 실패한 경우, 나중에 분석할 수 있도록 태그를 추가합니다.
        # 이 로그들은 원본 message 필드가 그대로 유지됩니다.
        mutate {
          add_tag => ["_parsefailure"]
        }
      }
    }
    output {
      elasticsearch {
        hosts => ["http://host.docker.internal:9200"]
        index => "project-1-logs-%%{+YYYY.MM.dd}"
      }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-yml-config
  namespace: logging
data:
  logstash.yml: |
    http.host: "0.0.0.0"
    xpack.monitoring.enabled: false